<?php
/**
 * Created by PhpStorm.
 * User: medric
 * Date: 23/12/18
 * Time: 20:03
 */

namespace app\controllers;


use app\managers\AdministratorSessionManager;
use app\managers\FileManager;
use app\managers\FinanceManager;
use app\managers\RedirectionManager;
use app\managers\SettingManager;
use app\models\Administrator;
use app\models\Borrowing;
use app\models\BorrowingSaving;
use app\models\Exercise;
use app\models\forms\HelpTypeForm;
use app\models\forms\IdForm;
use app\models\forms\NewBorrowingForm;
use app\models\forms\NewMemberForm;
use app\models\forms\NewSavingForm;
use app\models\forms\NewSessionForm;
use app\models\forms\UpdatePasswordForm;
use app\models\forms\UpdateSocialInformationForm;
use app\models\HelpType;
use app\models\Member;
use app\models\Saving;
use app\models\Session;
use app\models\User;
use DateTime;
use Yii;
use yii\base\Security;
use yii\data\Pagination;
use yii\db\Query;
use yii\web\Controller;
use yii\web\UploadedFile;

class AdministratorController extends Controller
{
    public $layout = "administrator_base";
    public $user;
    public $administrator;
    public $defaultAction = "accueil";


    public function beforeAction($action)
    {

        if (!\Yii::$app->user->getIsGuest()) {

            $user = User::findOne(\Yii::$app->user->getId());


            if ($user->type ===  "ADMINISTRATOR") {
                $this->user = $user;
                $this->administrator = Administrator::findOne(['user_id'=> $user->id]);
                $this->view->params = ['user' => $this->user,'administrator' => $this->administrator];
                return parent::beforeAction($action); // TODO: Change the autogenerated stub
            }
            elseif ( $user->type === "MEMBER") {
                \Yii::$app->response->redirect("@member.home");
            }
            else
                return RedirectionManager::abort($this);;
        }
        else {
            \Yii::$app->response->redirect("@guest.connection");
        }
    }



    public function actionAccueil() {
        AdministratorSessionManager::setHome();
        $session = Session::findOne(['active' => true]);
        $idModel = new IdForm();
        if ($session)
            $idModel->id = $session->id;
        $model = new NewSessionForm();
        return $this->render('home',compact('session','model','idModel'));
    }

    public function actionNouvelleSession() {
        if (Yii::$app->request->getIsPost()) {
            $idModel = new IdForm();
            $model = new NewSessionForm();
            $session = null;
            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                // Traitement de l'exercice
                $exercise = Exercise::findOne(['active' => true]);
                if ($exercise){
                    // S'il y a un exercice en cours

                    if (  count( Session::findAll(['exercise_id'=> $exercise->id]))>=12 ) {
                        // S'il ya deja 12 exercise pour cette exercice
                        $exercise->active == false;
                        $exercise->save();

                        $exercise = new Exercise();
                        $exercise->year = (int) (new DateTime())->format("y");
                        $exercise->save();
                    }
                }
                else {
                    // S'il n'y a pas, on le crÃ©e
                    $exercise = new Exercise();
                    $exercise->administrator_id = $this->administrator->id;
                    $exercise->year = (int) (new DateTime())->format("y");
                    $exercise->save();
                }

                $session = new Session();
                $session->administrator_id = $this->administrator->id;
                $session->exercise_id = $exercise->id;
                $session->date = $model->date;
                $session->save();

                return $this->redirect("@administrator.home");
            }
            else {
                return $this->render('home',compact('session','model','idModel'));
            }
        }
        else
            return RedirectionManager::abort($this);
    }



    public function actionDesactiveSession() {
        if (Yii::$app->request->getIsPost()) {
            $idModel = new IdForm();
            if ($idModel->load(Yii::$app->request->post()) && $idModel->validate()) {
                $session = Session::findOne($idModel->id);

                $session->active = false;
                $session->save();

                return $this->redirect("@administrator.home");
            }
            else
                return RedirectionManager::abort($this);
        }
        else
            return RedirectionManager::abort($this);
    }

    public function actionProfil() {
        AdministratorSessionManager::setProfile();
        return $this->render('profile');
    }
    public function actionModifierProfil() {
        AdministratorSessionManager::setProfile();
        $socialModel = new UpdateSocialInformationForm();
        $passwordModel = new UpdatePasswordForm();

        $socialModel->attributes = [
            'username' => $this->administrator->username,
            'name' => $this->user->name,
            'first_name' => $this->user->first_name,
            'tel' => $this->user->tel,
            'email' => $this->user->email,
        ];

        return $this->render('update_profile',compact('socialModel','passwordModel'));
    }

    public function actionModifierInformationSociale() {
        if (\Yii::$app->request->getIsPost()) {
            $socialModel = new UpdateSocialInformationForm();
            $passwordModel = new UpdatePasswordForm();

            if ($socialModel->load(\Yii::$app->request->post()) &&  $socialModel->validate()) {
                $this->user->name = $socialModel->name;
                $this->user->first_name = $socialModel->first_name;
                $this->user->tel = $socialModel->tel;
                $this->user->email = $socialModel->email;
                if (UploadedFile::getInstance($socialModel,"avatar"))
                    $this->user->avatar = FileManager::storeAvatar( UploadedFile::getInstance($socialModel,"avatar"),$socialModel->username,"ADMINISTRATOR");

                $this->user->save();
                $this->administrator->username = $socialModel->username;
                $this->administrator->save();
                return $this->redirect("@administrator.profile");
            }
            else
                return $this->render('update_profile',compact('socialModel','passwordModel'));

        }
        else
        {
            return RedirectionManager::abort($this);;
        }
    }

    public function actionModifierMotDePasse() {
        if (\Yii::$app->request->getIsPost()) {
            $socialModel = new UpdateSocialInformationForm();
            $socialModel->attributes = [
                'username' => $this->administrator->username,
                'name' => $this->user->name,
                'first_name' => $this->user->first_name,
                'tel' => $this->user->tel,
                'email' => $this->user->email,
            ];

            $passwordModel = new UpdatePasswordForm();
            if ($passwordModel->load(\Yii::$app->request->post()) &&  $passwordModel->validate()) {
                if ($this->user->validatePassword($passwordModel->password)) {
                    $this->user->password = Yii::$app->getSecurity()->generatePasswordHash($passwordModel->new_password);
                    $this->user->save();
                    return $this->redirect("@administrator.profile");
                }
                else {
                    $passwordModel->addError('password','Le mot de passe ne correspond pas.');
                    return $this->render('update_profile',compact('socialModel','passwordModel'));
                }

            }
            else
                return $this->render('update_profile',compact('socialModel','passwordModel'));

        }
        else
            return RedirectionManager::abort($this);;
    }


    public function actionTypesAide() {
        AdministratorSessionManager::setHelps();
        $helpTypes = HelpType::find()->all();
        return $this->render('help_types',compact('helpTypes'));
    }
    public function actionModifierTypeAide($q=0) {
        if ($q) {
            $model = new HelpTypeForm();

            $helpType = HelpType::findOne($q);
            if ($helpType) {
                $model->id = $helpType->id;
                $model->title = $helpType->title;
                $model->amount = $helpType->amount;
                return $this->render('update_help_type',compact('model'));
            }
            else {
                return RedirectionManager::abort($this);
            }
        }
        else{
            return RedirectionManager::abort($this);
        }
    }

    public function actionAppliquerModificationTypeAide() {
        if (Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()){
                $helpType = HelpType::findOne($model->id);
                $helpType->title = $model->title;
                $helpType->amount = $model->amount;
                $helpType->save();
                return $this->redirect("@administrator.help_types");
            }
            else{
                return $this->render('update_help_type',compact('model'));
            }
        }
        else
            return RedirectionManager::abort($this);
    }

    public function actionSupprimerTypeAide() {
        if (Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();
            $model->load(Yii::$app->request->post());
            if ($model->id) {
                $helpType = HelpType::findOne($model->id);
                if ($helpType)
                {
                    $helpType->delete();
                    return $this->redirect("@administrator.help_types");
                }
                else
                    return RedirectionManager::abort($this);
            }
            else
                return RedirectionManager::abort($this);
        }
        else
            return RedirectionManager::abort($this);
    }

    public function actionNouveauTypeAide() {
        AdministratorSessionManager::setHelps();
        $model = new HelpTypeForm();
        return $this->render('new_help_type',compact('model'));
    }
    public function actionAjouterTypeAide() {
        if (\Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $helpType = new HelpType();
                $helpType->title = $model->title;
                $helpType->amount=  $model->amount;
                $helpType->save();
                return $this->redirect('@administrator.help_types');
            }
            else
                return $this->render('new_help_type',compact('model'));

        }
        else {
            return RedirectionManager::abort($this);
        }
    }



    public function actionDeconnexion() {
        if (\Yii::$app->request->post()) {
            \Yii::$app->user->logout();
            return $this->redirect('@guest.connection');
        }
        else{
            return RedirectionManager::abort($this);
        }
    }

    public function actionMembres() {
        AdministratorSessionManager::setMembers();
        $members = Member::find()->all();
        return $this->render('members',compact('members'));
    }

    public function actionNouveauMembre() {
        AdministratorSessionManager::setMembers();
        $model = new NewMemberForm();
        return $this->render('new_member',['model'=> $model]);
    }

    public function actionAjouterMember() {
        if (\Yii::$app->request->post()) {
            $model = new NewMemberForm();

            if ($model->load(\Yii::$app->request->post()) && $model->validate()) {
                if (!Member::findOne(['username' => $model->username]))
                {
                    $user = new User();
                    $user->name = $model->name;
                    $user->first_name = $model->first_name;
                    $user->tel = $model->tel;
                    $user->email = $model->email;
                    $user->type = "MEMBER";
                    $user->password = (new Security())->generatePasswordHash($model->password);
                    if (UploadedFile::getInstance($model,'avatar'))
                        $user->avatar = FileManager::storeAvatar(UploadedFile::getInstance($model,'avatar'),$model->username,'MEMBER');
                    $user->save();


                    $member = new Member();
                    $member->administrator_id = $this->administrator->id;
                    $member->user_id = $user->id;
                    $member->username = $model->username;
                    $member->save();
                    return $this->redirect('@administrator.members');
                }
                $model->addError('username','Ce nom d\'utilisateur est dÃ©jÃ  pris');
                return $this->render('new_member',compact('model'));
            }
            return $this->render('new_member',compact('model'));

        }
        else{
            return RedirectionManager::abort($this);
        }

    }

    public function actionAdministrateurs() {
        AdministratorSessionManager::setAdministrators();
        return $this->render("administrators");
    }

    public function actionEpargnes() {
        AdministratorSessionManager::setHome("saving");
        $model = new NewSavingForm();

        $query = Session::find();
        $pagination = new Pagination([
            'defaultPageSize' => 5,
            'totalCount' => $query->count(),
        ]);

        $sessions = $query->orderBy(['created_at'=> SORT_DESC])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();



        return $this->render("savings",compact("model","sessions","pagination"));
    }


    public function actionNouvelleEpargne() {
        if (Yii::$app->request->getIsPost()) {

            $query = Session::find();
            $pagination = new Pagination([
                'defaultPageSize' => 5,
                'totalCount' => $query->count(),
            ]);

            $sessions = $query->orderBy(['created_at'=> SORT_DESC])
                ->offset($pagination->offset)
                ->limit($pagination->limit)
                ->all();

            $model = new NewSavingForm();
            if ($model->load(Yii::$app->request->post()) && $model->validate() ) {
                $member = Member::findOne($model->member_id);
                $session = Session::findOne($model->session_id);
                if ($member && $session && ($session->state =="SAVING")) {
                    $saving = new Saving();

                    $saving->member_id = $model->member_id;
                    $saving->session_id = $model->session_id;
                    $saving->amount = $model->amount;
                    $saving->administrator_id = $this->administrator->id;
                    $saving->save();

                    return $this->redirect("@administrator.savings");
                }
                else
                    return RedirectionManager::abort($this);
            }
            else return $this->render("savings",compact("model","pagination","sessions"));
        }
        else
            return RedirectionManager::abort($this);
    }

    public function actionRemboursements() {
        AdministratorSessionManager::setHome("refund");
        return $this->render("refunds");
    }

    public function actionEmprunts() {
        AdministratorSessionManager::setHome("borrowing");

        $model = new NewBorrowingForm();

        $query = Session::find();
        $pagination = new Pagination([
            'defaultPageSize' => 5,
            'totalCount' => $query->count(),
        ]);

        $sessions = $query->orderBy(['created_at'=> SORT_DESC])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        return $this->render("borrowings",compact("model","sessions","pagination"));
    }

    public function actionNouvelleEmprunt() {
        if (Yii::$app->request->getIsPost()) {
            $query = Session::find();
            $pagination = new Pagination([
                'defaultPageSize' => 5,
                'totalCount' => $query->count(),
            ]);

            $sessions = $query->orderBy(['created_at'=> SORT_DESC])
                ->offset($pagination->offset)
                ->limit($pagination->limit)
                ->all();

            $model = new NewBorrowingForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $member = Member::findOne($model->member_id);
                $session = Session::findOne($model->session_id);
                if ($member && $session && $session->state == "BORROWING") {
                    if (! Borrowing::findOne(['member_id' => $member->id,'state' => true]) ) {
                        if ($model->amount <= FinanceManager::exerciseAmount()) {
                            $borrowing = new Borrowing();

                            $borrowing->interest = SettingManager::getInterest();
                            $borrowing->amount = $model->amount;
                            $borrowing->member_id = $model->member_id;
                            $borrowing->administrator_id = $this->administrator->id;
                            $borrowing->session_id = $model->session_id;
                            $borrowing->save();


                            $totalSavedAmount = FinanceManager::totalSavedAmount();

                            foreach (FinanceManager::exerciseSavings() as $saving) {
                                $borrowingSaving = new BorrowingSaving();
                                $borrowingSaving->saving_id = $saving->id;
                                $borrowingSaving->borrowing_id = $borrowing->id;
                                $borrowingSaving->percent =100.0*((double)$saving->amount)/ $totalSavedAmount;
                                $borrowingSaving->save();
                            }
                            return $this->redirect('@administrator.borrowings');
                        }
                        else
                        {
                            $model->addError('amount','Le montant demandÃ© est supÃ©rieur au montant en caisse.');
                            return $this->render("borrowings",compact("model","sessions","pagination"));
                        }

                    }
                    else
                    {
                        $model->addError('member_id','Ce membre a dÃ©jÃ  fait un emprunt.');
                        return $this->render("borrowings",compact("model","sessions","pagination"));
                    }
                }
                else
                    return RedirectionManager::abort($this);
            }
            else
                return $this->render("borrowings",compact("model","sessions","pagination"));
        }
        else
            return RedirectionManager::abort($this);
    }


    public function actionAides() {
        AdministratorSessionManager::setHome("help");
        return $this->render("helps");
    }

    public function actionSessions() {
        AdministratorSessionManager::setHome("session");

        return $this->render("sessions");
    }

    public function actionPasserAuxRemboursements($q=0) {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $session->state = "REFUND";
                $session->save();

                return $this->redirect("@administrator.home");
            }
            else
                return RedirectionManager::abort($this);
        }
        else
            return RedirectionManager::abort($this);
    }

    public function actionPasserAuxEmprunts($q=0) {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $session->state = "BORROWING";
                $session->save();
                return $this->redirect("@administrator.home");
            }
            else
                return RedirectionManager::abort($this);
        }
        else
            return RedirectionManager::abort($this);

    }

    public function actionCloturerSession($q=0) {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $session->state = "END";
                $session->active = false;
                $session->save();
                return $this->redirect("@administrator.home");
            }
            else
                return RedirectionManager::abort($this);
        }
        else
            return RedirectionManager::abort($this);

    }

    public function actionRentrerAuxRemboursements($q=0) {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                $borrowings = Borrowing::findAll(['session_id' => $session->id]);
                foreach ($borrowings as $borrowing) {
                    Yii::$app->db->createCommand()->delete('borrowing_saving',['borrowing_id'=> $borrowing->id])->execute();
                    $borrowing->delete();
                }

                $session->state = "REFUND";
                $session->save();

                return $this->redirect("@administrator.home");
            }
            else
                return RedirectionManager::abort($this);
        }
        else
            return RedirectionManager::abort($this);

    }

    public function actionRentrerAuxEpargnes($q=0) {
        if ($q) {
            $session = Session::findOne($q);
            if ($session && $session->active) {
                Yii::$app->db->createCommand()->delete('refund',['session_id'=> $q])->execute();

                $session->state = "SAVING";
                $session->save();
                return $this->redirect("@administrator.home");
            }
            else
                return RedirectionManager::abort($this);
        }
        else
            return RedirectionManager::abort($this);

    }


}