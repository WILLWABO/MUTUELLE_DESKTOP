<?php
/**
 * Created by PhpStorm.
 * User: medric
 * Date: 23/12/18
 * Time: 20:03
 */

namespace app\controllers;


use app\managers\AdministratorSessionManager;
use app\managers\FileManager;
use app\managers\RedirectionManager;
use app\models\Administrator;
use app\models\forms\HelpTypeForm;
use app\models\forms\NewMemberForm;
use app\models\forms\UpdatePasswordForm;
use app\models\forms\UpdateSocialInformationForm;
use app\models\HelpType;
use app\models\Member;
use app\models\User;
use Yii;
use yii\base\Security;
use yii\web\Controller;
use yii\web\UploadedFile;

class AdministratorController extends Controller
{
    public $layout = "administrator_base";
    public $user;
    public $administrator;
    public $defaultAction = "accueil";


    public function beforeAction($action)
    {

        if (!\Yii::$app->user->getIsGuest()) {

            $user = User::findOne(\Yii::$app->user->getId());


            if ($user->type ===  "ADMINISTRATOR") {
                $this->user = $user;
                $this->administrator = Administrator::findOne(['user_id'=> $user->id]);
                $this->view->params = ['user' => $this->user,'administrator' => $this->administrator];
                return parent::beforeAction($action); // TODO: Change the autogenerated stub
            }
            elseif ( $user->type === "MEMBER") {
                \Yii::$app->response->redirect("@member.home");
            }
            else
                return RedirectionManager::abort($this);;
        }
        else {
            \Yii::$app->response->redirect("@guest.connection");
        }
    }



    public function actionAccueil() {
        AdministratorSessionManager::setHome();
        return $this->render('home');
    }

    public function actionProfil() {
        AdministratorSessionManager::setProfile();
        return $this->render('profile');
    }
    public function actionModifierProfil() {
        AdministratorSessionManager::setProfile();
        $socialModel = new UpdateSocialInformationForm();
        $passwordModel = new UpdatePasswordForm();

        $socialModel->attributes = [
            'username' => $this->administrator->username,
            'name' => $this->user->name,
            'first_name' => $this->user->first_name,
            'tel' => $this->user->tel,
            'email' => $this->user->email,
        ];

        return $this->render('update_profile',compact('socialModel','passwordModel'));
    }

    public function actionModifierInformationSociale() {
        if (\Yii::$app->request->getIsPost()) {
            $socialModel = new UpdateSocialInformationForm();
            $passwordModel = new UpdatePasswordForm();

            if ($socialModel->load(\Yii::$app->request->post()) &&  $socialModel->validate()) {
                $this->user->name = $socialModel->name;
                $this->user->first_name = $socialModel->first_name;
                $this->user->tel = $socialModel->tel;
                $this->user->email = $socialModel->email;
                if (UploadedFile::getInstance($socialModel,"avatar"))
                    $this->user->avatar = FileManager::storeAvatar( UploadedFile::getInstance($socialModel,"avatar"),$socialModel->username,"ADMINISTRATOR");

                $this->user->save();
                $this->administrator->username = $socialModel->username;
                $this->administrator->save();
                return $this->redirect("@administrator.profile");
            }
            else
                return $this->render('update_profile',compact('socialModel','passwordModel'));

        }
        else
        {
            return RedirectionManager::abort($this);;
        }
    }

    public function actionModifierMotDePasse() {
        if (\Yii::$app->request->getIsPost()) {
            $socialModel = new UpdateSocialInformationForm();
            $socialModel->attributes = [
                'username' => $this->administrator->username,
                'name' => $this->user->name,
                'first_name' => $this->user->first_name,
                'tel' => $this->user->tel,
                'email' => $this->user->email,
            ];

            $passwordModel = new UpdatePasswordForm();
            if ($passwordModel->load(\Yii::$app->request->post()) &&  $passwordModel->validate()) {
                if ($this->user->validatePassword($passwordModel->password)) {
                    $this->user->password = Yii::$app->getSecurity()->generatePasswordHash($passwordModel->new_password);
                    $this->user->save();
                    return $this->redirect("@administrator.profile");
                }
                else {
                    $passwordModel->addError('password','Le mot de passe ne correspond pas.');
                    return $this->render('update_profile',compact('socialModel','passwordModel'));
                }

            }
            else
                return $this->render('update_profile',compact('socialModel','passwordModel'));

        }
        else
            return RedirectionManager::abort($this);;
    }


    public function actionTypesAide() {
        AdministratorSessionManager::setHelps();
        $helpTypes = HelpType::find()->all();
        return $this->render('help_types',compact('helpTypes'));
    }
    public function actionModifierTypeAide($q=0) {
        if ($q) {
            $model = new HelpTypeForm();

            $helpType = HelpType::findOne($q);
            if ($helpType) {
                $model->id = $helpType->id;
                $model->title = $helpType->title;
                $model->amount = $helpType->amount;
                return $this->render('update_help_type',compact('model'));
            }
            else {
                return RedirectionManager::abort($this);
            }
        }
        else{
            return RedirectionManager::abort($this);
        }
    }

    public function actionAppliquerModificationTypeAide() {
        if (Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()){
                $helpType = HelpType::findOne($model->id);
                $helpType->title = $model->title;
                $helpType->amount = $model->amount;
                $helpType->save();
                return $this->redirect("@administrator.help_types");
            }
            else{
                return $this->render('update_help_type',compact('model'));
            }
        }
        else
            return RedirectionManager::abort($this);
    }

    public function actionSupprimerTypeAide() {
        if (Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();
            $model->load(Yii::$app->request->post());
            if ($model->id) {
                $helpType = HelpType::findOne($model->id);
                if ($helpType)
                {
                    $helpType->delete();
                    return $this->redirect("@administrator.help_types");
                }
                else
                    return RedirectionManager::abort($this);
            }
            else
                return RedirectionManager::abort($this);
        }
        else
            return RedirectionManager::abort($this);
    }

    public function actionNouveauTypeAide() {
        AdministratorSessionManager::setHelps();
        $model = new HelpTypeForm();
        return $this->render('new_help_type',compact('model'));
    }
    public function actionAjouterTypeAide() {
        if (\Yii::$app->request->getIsPost()) {
            $model = new HelpTypeForm();

            if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                $helpType = new HelpType();
                $helpType->title = $model->title;
                $helpType->amount=  $model->amount;
                $helpType->save();
                return $this->redirect('@administrator.help_types');
            }
            else
                return $this->render('new_help_type',compact('model'));

        }
        else {
            return RedirectionManager::abort($this);
        }
    }



    public function actionDeconnexion() {
        if (\Yii::$app->request->post()) {
            \Yii::$app->user->logout();
            return $this->redirect('@guest.connection');
        }
        else{
            return RedirectionManager::abort($this);
        }
    }

    public function actionMembres() {
        AdministratorSessionManager::setMembers();
        $members = Member::find()->all();
        return $this->render('members',compact('members'));
    }

    public function actionNouveauMembre() {
        AdministratorSessionManager::setMembers();
        $model = new NewMemberForm();
        return $this->render('new_member',['model'=> $model]);
    }

    public function actionAjouterMember() {
        if (\Yii::$app->request->post()) {
            $model = new NewMemberForm();

            if ($model->load(\Yii::$app->request->post()) && $model->validate()) {
                if (!Member::findOne(['username' => $model->username]))
                {
                    $user = new User();
                    $user->name = $model->name;
                    $user->first_name = $model->first_name;
                    $user->tel = $model->tel;
                    $user->email = $model->email;
                    $user->type = "MEMBER";
                    $user->password = (new Security())->generatePasswordHash($model->password);
                    if (UploadedFile::getInstance($model,'avatar'))
                        $user->avatar = FileManager::storeAvatar(UploadedFile::getInstance($model,'avatar'),$model->username,'MEMBER');
                    $user->save();


                    $member = new Member();
                    $member->administrator_id = $this->administrator->id;
                    $member->user_id = $user->id;
                    $member->username = $model->username;
                    $member->save();
                    return $this->redirect('@administrator.members');
                }
                $model->addError('username','Ce nom d\'utilisateur est déjà pris');
                return $this->render('new_member',compact('model'));
            }
            return $this->render('new_member',compact('model'));

        }
        else{
            return RedirectionManager::abort($this);
        }

    }

    public function actionAdministrateurs() {
        AdministratorSessionManager::setAdministrators();
        return $this->render("administrators");
    }

}